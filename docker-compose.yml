services:
  postgres:
    image: postgres:15-alpine
    container_name: cv_parser_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cvparser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cvparser123}
      POSTGRES_DB: ${POSTGRES_DB:-cv_parser_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cvparser} -d ${POSTGRES_DB:-cv_parser_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cv_parser_network
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cv_parser_app
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-cvparser}:${POSTGRES_PASSWORD:-cvparser123}@postgres:5432/${POSTGRES_DB:-cv_parser_db}
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cv_parser_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cv_parser_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@cvparser.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - cv_parser_network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  cv_parser_network:
    driver: bridge